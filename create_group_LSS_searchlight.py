#!/usr/bin/env python3
"""
Group-Level LSS Searchlight Analysis SLURM Script Generator

This script generates SLURM scripts for group-level statistical analysis on LSS 
(Least Squares Separate) searchlight similarity maps using either FLAMEO 
(parametric) or Randomise (non-parametric) methods.

Usage:
    python create_group_LSS_searchlight.py --method flameo
    python create_group_LSS_searchlight.py --method randomise --dry-run
    python create_group_LSS_searchlight.py --list-map-types

Author: Xiaoqian Xiao (xiao.xiaoqian.320@gmail.com)
"""

# =============================================================================
# IMPORTS AND CONFIGURATION
# =============================================================================

import os
import argparse
from itertools import combinations
import logging
from pathlib import Path

# Configure logging
def setup_logging():
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    stream_handler = logging.StreamHandler()
    stream_handler.setFormatter(formatter)
    logger.addHandler(stream_handler)
    return logger

logger = setup_logging()

def generate_slurm_scripts(method, work_dir, slurm_dir, container_path, script_path, custom_resources=None):
    """
    Generate Slurm scripts for group-level LSS searchlight analysis.
    
    Args:
        method (str): Analysis method ('flameo' or 'randomise')
        work_dir (str): Working directory
        slurm_dir (str): Directory to save Slurm scripts
        container_path (str): Path to the container image
        script_path (str): Path to the group_LSS_searchlight.py script
        custom_resources (dict): Optional custom resource limits
    """
    # Trial types for LSS analysis with enhanced CS- condition grouping
    # CS-_first: First trial of CS- conditions (separate condition)
    # CS-: All other CS- trials grouped together
    # Other conditions: Individual trial types
    trial_types = ['SHOCK', 'FIXATION', 'CS-_first', 'CS-', 'CSS', 'CSR']
    
    # Generate map types for LSS similarity analysis
    map_types = []
    
    # Within-condition maps (e.g., within-FIXATION, within-SHOCK)
    for ttype in trial_types:
        map_types.append(f'within-{ttype}')
    
    # Between-condition maps (e.g., between-FIXATION-CS-_first, between-FIXATION-CS-, between-SHOCK-CSS)
    for t1, t2 in combinations(trial_types, 2):
        map_types.append(f'between-{t1}-{t2}')
    
    tasks = ['phase2', 'phase3']
    
    logger.info(f"Generating Slurm scripts for {len(map_types)} map types and {len(tasks)} tasks with method {method}")
    logger.info(f"Map types: {map_types}")

    # Set time limit based on method (fixed format)
    if method == 'flameo':
        time_limit = custom_resources.get('time', '02:00:00') if custom_resources else '02:00:00'  # 2 hours for FLAMEO
        mem_limit = custom_resources.get('memory', '20G') if custom_resources else '20G'
        cpus_per_task = custom_resources.get('cpus', 16) if custom_resources else 16
        partition = custom_resources.get('partition', 'ckpt-all') if custom_resources else 'ckpt-all'
    else:  # randomise
        time_limit = custom_resources.get('time', '04:00:00') if custom_resources else '04:00:00'  # 4 hours for Randomise
        mem_limit = custom_resources.get('memory', '32G') if custom_resources else '32G'
        cpus_per_task = custom_resources.get('cpus', 8) if custom_resources else 8
        partition = custom_resources.get('partition', 'ckpt-all') if custom_resources else 'ckpt-all'

    # Slurm template with configurable paths
    slurm_template = f"""#!/bin/bash
#SBATCH --account=fang                                                                                            
#SBATCH --partition={partition}
#SBATCH --job-name=group_LSS_searchlight_{{map_type}}_{{task}}_{{method}}
#SBATCH --output={work_dir}/{{task}}_group_LSS_searchlight_{{map_type}}_{{method}}_%j.out
#SBATCH --error={work_dir}/{{task}}_group_LSS_searchlight_{{map_type}}_{{method}}_%j.err
#SBATCH --time={{time}}
#SBATCH --mem={{mem}}
#SBATCH --cpus-per-task={{cpus}}

# Group-Level LSS Searchlight Analysis Job
# Generated by create_group_LSS_searchlight.py
# Method: {method}
# Map Type: {{map_type}}
# Task: {{task}}

module load apptainer
export OMP_NUM_THREADS=4

# Create output directory if it doesn't exist
mkdir -p {work_dir}

# Run group-level LSS searchlight analysis
apptainer exec \\
    -B /gscratch/fang:/data \\
    -B /gscratch/scrubbed/fanglab/xiaoqian:/scrubbed_dir \\
    -B /gscratch/scrubbed/fanglab/xiaoqian/repo/hyak_narsad/group_LSS_searchlight.py:/app/group_LSS_searchlight.py \\
    -B /gscratch/scrubbed/fanglab/xiaoqian/repo/hyak_narsad/group_level_workflows.py:/app/group_level_workflows.py \\
    -B /gscratch/scrubbed/fanglab/xiaoqian/repo/hyak_narsad/utils.py:/app/utils.py \\
    {container_path} python3 /app/group_LSS_searchlight.py --map_type {{map_type}} --method {{method}}

echo "Job completed: $(date)"
"""

    # Generate Slurm script for each map type and task
    script_paths = []
    for map_type in map_types:
        for task in tasks:
            try:
                # Create a safe filename by replacing problematic characters
                safe_map_type = map_type.replace('-', '_').replace('+', 'plus')
                script_path = os.path.join(slurm_dir, f'group_LSS_searchlight_{safe_map_type}_{task}_{method}_slurm.sh')
                
                # Format template with current values
                script_content = slurm_template.format(
                    map_type=map_type, 
                    task=task, 
                    method=method, 
                    time=time_limit,
                    mem=mem_limit,
                    cpus=cpus_per_task
                )
                
                with open(script_path, 'w') as f:
                    f.write(script_content)
                
                os.chmod(script_path, 0o755)  # Make executable
                script_paths.append(script_path)
                logger.info(f"Generated Slurm script: {os.path.basename(script_path)}")
                
            except Exception as e:
                logger.error(f"Failed to generate script for {map_type}_{task}: {e}")
                continue
    
    logger.info(f"Successfully generated {len(script_paths)} Slurm scripts")
    return script_paths

def main():
    """Main function to generate SLURM scripts for group-level LSS searchlight analysis."""
    # Parse arguments
    parser = argparse.ArgumentParser(description='Generate SLURM scripts for group-level LSS searchlight analysis.')
    
    # Analysis method
    parser.add_argument('--method', choices=['flameo', 'randomise'], default='flameo', 
                       help='Analysis method: flameo or randomise (default: flameo)')
    
    # Paths
    parser.add_argument('--container-path', 
                       default='/gscratch/scrubbed/fanglab/xiaoqian/images/narsad-fmri_1st_level_1.0.sif',
                       help='Path to the container image')
    parser.add_argument('--script-path', 
                       default='/gscratch/scrubbed/fanglab/xiaoqian/repo/hyak_narsad/group_LSS_searchlight.py',
                       help='Path to the group_LSS_searchlight.py script')
    parser.add_argument('--work-dir', 
                       default='/gscratch/scrubbed/fanglab/xiaoqian/NARSAD/work_flows/Lss_group_searchlight',
                       help='Working directory for outputs and logs')
    
    # Custom resource limits
    parser.add_argument('--time', 
                       help='Custom time limit (e.g., 04:00:00 for 4 hours)')
    parser.add_argument('--memory', 
                       help='Custom memory limit (e.g., 32G for 32GB)')
    parser.add_argument('--cpus', type=int,
                       help='Custom CPU count (e.g., 32 for 32 CPUs)')
    parser.add_argument('--partition',
                       help='Custom SLURM partition (e.g., ckpt-all, cpu-g2)')
    
    # Other options
    parser.add_argument('--dry-run', action='store_true',
                       help='Show what would be created without creating files')
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='Verbose output with detailed progress information')
    parser.add_argument('--list-map-types', action='store_true',
                       help='List all map types that will be generated and exit')
    
    args = parser.parse_args()
    method = args.method

    # Handle list-map-types option
    if args.list_map_types:
        trial_types = ['SHOCK', 'FIXATION', 'CS-_first', 'CS-', 'CSS', 'CSR']
        map_types = []
        
        # Within-condition maps
        for ttype in trial_types:
            map_types.append(f'within-{ttype}')
        
        # Between-condition maps
        from itertools import combinations
        for t1, t2 in combinations(trial_types, 2):
            map_types.append(f'between-{t1}-{t2}')
        
        print("Map types that will be generated:")
        print("Within-condition maps (6):")
        for i, map_type in enumerate(map_types[:6], 1):
            print(f"  {i}. {map_type}")
        
        print("\nBetween-condition maps (15):")
        for i, map_type in enumerate(map_types[6:], 7):
            print(f"  {i}. {map_type}")
        
        print(f"\nTotal: {len(map_types)} map types × 2 tasks × 2 methods = {len(map_types) * 2 * 2} SLURM scripts")
        return 0

    try:
        # Create work_dir and slurm_dir
        work_dir = args.work_dir
        slurm_dir = os.path.join(work_dir, method)
        
        # Ensure directories exist
        if not args.dry_run:
            os.makedirs(work_dir, exist_ok=True)
            os.makedirs(slurm_dir, exist_ok=True)
        
        logger.info(f"Working directory: {work_dir}")
        logger.info(f"Slurm scripts directory: {slurm_dir}")
        logger.info(f"Container path: {args.container_path}")
        logger.info(f"Script path: {args.script_path}")

        # Validate paths (skip if dry-run)
        if not args.dry_run:
            if not os.path.exists(args.container_path):
                logger.error(f"Container not found: {args.container_path}")
                logger.error("Please check the container path and ensure it exists.")
                return 1
                
            if not os.path.exists(args.script_path):
                logger.error(f"Script not found: {args.script_path}")
                logger.error("Please check the script path and ensure group_LSS_searchlight.py exists.")
                return 1

            # Check for required dependencies
            script_dir = os.path.dirname(args.script_path)
            required_files = ['group_level_workflows.py', 'utils.py']
            missing_files = []
            
            for file in required_files:
                file_path = os.path.join(script_dir, file)
                if not os.path.exists(file_path):
                    missing_files.append(file)
            
            if missing_files:
                logger.error(f"Missing required dependency files: {missing_files}")
                logger.error(f"Please ensure these files exist in: {script_dir}")
                return 1

        # Prepare custom resources if specified
        custom_resources = {}
        if args.time:
            custom_resources['time'] = args.time
        if args.memory:
            custom_resources['memory'] = args.memory
        if args.cpus:
            custom_resources['cpus'] = args.cpus
        if args.partition:
            custom_resources['partition'] = args.partition

        if custom_resources:
            logger.info(f"Using custom resource limits: {custom_resources}")

        # Generate Slurm scripts
        if args.dry_run:
            logger.info("DRY RUN MODE - No files will be created")
            # Calculate what would be generated
            trial_types = ['SHOCK', 'FIXATION', 'CS-_first', 'CS-', 'CSS', 'CSR']
            map_types = []
            for ttype in trial_types:
                map_types.append(f'within-{ttype}')
            from itertools import combinations
            for t1, t2 in combinations(trial_types, 2):
                map_types.append(f'between-{t1}-{t2}')
            
            total_scripts = len(map_types) * 2  # 2 tasks
            logger.info(f"Would generate {total_scripts} SLURM scripts for method: {method}")
            logger.info(f"Would create directory: {slurm_dir}")
            logger.info(f"Would use container: {args.container_path}")
            logger.info(f"Would use script: {args.script_path}")
            
            if args.verbose:
                logger.info("Would generate scripts for:")
                for map_type in map_types:
                    for task in ['phase2', 'phase3']:
                        safe_map_type = map_type.replace('-', '_').replace('+', 'plus')
                        script_name = f'group_LSS_searchlight_{safe_map_type}_{task}_{method}_slurm.sh'
                        logger.info(f"  - {script_name}")
            
            logger.info("")
            logger.info("To actually create the scripts, run without --dry-run")
            return 0
        else:
            script_paths = generate_slurm_scripts(
                method, work_dir, slurm_dir, 
                args.container_path, args.script_path, custom_resources
            )
            
            if script_paths:
                logger.info(f"Script generation completed successfully!")
                logger.info(f"Generated {len(script_paths)} scripts in: {slurm_dir}")
                
                # Show summary of generated scripts
                if args.verbose:
                    logger.info("Generated scripts:")
                    for script_path in script_paths:
                        logger.info(f"  - {os.path.basename(script_path)}")
                
                logger.info("")
                logger.info("Next steps:")
                logger.info("  1. Review the generated SLURM scripts")
                logger.info("  2. Submit jobs using: sbatch <script_name>")
                logger.info("  3. Monitor job progress using: squeue -u $USER")
                logger.info("  4. Check results in the output directories")
                logger.info("")
                logger.info("Or use the launcher script:")
                logger.info("  ./launch_group_LSS.sh --method " + method)
                
            else:
                logger.error("No scripts were generated successfully")
                return 1
        
        return 0
        
    except Exception as e:
        logger.error(f"Failed to generate Slurm scripts: {e}")
        if args.verbose:
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
        return 1

if __name__ == '__main__':
    exit(main())