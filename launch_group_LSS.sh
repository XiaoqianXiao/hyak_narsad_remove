#!/bin/bash

# =============================================================================
# Group-Level LSS Searchlight Analysis Job Launcher (Step 4)
# =============================================================================
#
# This script launches SLURM jobs for group-level LSS searchlight analysis.
# It automatically detects and launches scripts generated by create_group_LSS_searchlight.py
#
# Usage:
#   ./launch_group_LSS.sh                                    # Launch all available scripts
#   ./launch_group_LSS.sh --method flameo                    # Launch only FLAMEO scripts
#   ./launch_group_LSS.sh --method randomise                 # Launch only Randomise scripts
#   ./launch_group_LSS.sh --map-type within-SHOCK            # Launch only specific map type
#   ./launch_group_LSS.sh --task phase2                      # Launch only specific task
#   ./launch_group_LSS.sh --dry-run                          # Show what would be launched
#
# Author: Xiaoqian Xiao (xiao.xiaoqian.320@gmail.com)
#
# =============================================================================

# =============================================================================
# CONFIGURATION
# =============================================================================

# Base directory for group-level LSS searchlight scripts
SCRIPTS_BASE_DIR="/gscratch/scrubbed/fanglab/xiaoqian/NARSAD/work_flows/Lss_group_searchlight"

# Default settings
FILTER_METHOD=""
FILTER_MAP_TYPE=""
FILTER_TASK=""
DRY_RUN=false
VERBOSE=false
MAX_JOBS=50
JOB_DELAY=1

# =============================================================================
# HELPER FUNCTIONS
# =============================================================================

# Function to show usage information
show_usage() {
    cat << EOF
Usage: $0 [OPTIONS]

Description:
    This script submits all SLURM scripts generated by create_group_LSS_searchlight.py
    to run group-level statistical analysis on LSS searchlight similarity maps.
    It automatically discovers and submits scripts for all methods, map types, and tasks.

Options:
    --help, -h          Show this help message
    --method METHOD      Submit only scripts for specific method (flameo or randomise)
    --map-type TYPE      Submit only scripts for specific map type (e.g., within-FIXATION)
    --task TASK         Submit only scripts for specific task (phase2 or phase3)
    --dry-run, -n       Show what would be submitted without actually submitting
    --verbose, -v       Show detailed output during submission
    --max-jobs N        Maximum number of jobs to submit simultaneously (default: 10)
    --job-delay SEC     Delay between job submissions in seconds (default: 2)

Examples:
    # Submit all group-level LSS searchlight analysis scripts
    $0
    
    # Submit only FLAMEO analysis scripts
    $0 --method flameo
    
    # Submit only scripts for within-FIXATION maps
    $0 --map-type within-FIXATION
    
    # Submit only phase2 scripts
    $0 --task phase2
    
    # Submit only FLAMEO scripts for within-FIXATION maps in phase2
    $0 --method flameo --map-type within-FIXATION --task phase2
    
    # Show what would be submitted without submitting
    $0 --dry-run
    
    # Show detailed output during submission
    $0 --verbose
    
    # Limit concurrent jobs and add delays
    $0 --max-jobs 5 --job-delay 5

Workflow Context:
    This script is Step 4 of the LSS analysis pipeline:
    
    Step 1: create_1st_LSS_singleTrialEstimate.py -> run_LSS.py (individual trial GLM)
    Step 2: create_1st_LSS_2nd_cateAlltrials.py -> first_LSS_2nd_cateAlltrials.py (merge trials)
    Step 3: create_1st_LSS_3rd_similarity.py -> first_LSS_3rd_similarity.py (similarity analysis)
    Step 4: create_group_LSS_searchlight.py -> group_LSS_searchlight.py (group-level analysis) [THIS SCRIPT]
    
    The scripts generated by create_group_LSS_searchlight.py perform:
    - FLAMEO: Parametric analysis with clustering (recommended)
    - Randomise: Non-parametric permutation testing with TFCE

Prerequisites:
    - SLURM scripts must be generated by create_group_LSS_searchlight.py
    - Scripts should be in: $SCRIPTS_BASE_DIR
    - User must have SLURM access and sbatch command available

Output:
    - All group-level analysis scripts submitted to SLURM
    - Progress report showing what was submitted
    - Summary of total scripts submitted

EOF
}

# Function to check job limit
check_job_limit() {
    local max_jobs=$1
    local current_jobs=$(squeue -u $USER --format="%i" --noheader | wc -l)
    if [ $current_jobs -ge $max_jobs ]; then
        return 1  # At or above limit
    fi
    return 0  # Below limit
}

# Function to validate map type
validate_map_type() {
    local map_type=$1
    local valid_types=(
        "within-SHOCK" "within-FIXATION" "within-CS-" "within-CSS" "within-CSR"
        "between-SHOCK-FIXATION" "between-SHOCK-CS-" "between-SHOCK-CSS" "between-SHOCK-CSR"
        "between-FIXATION-CS-" "between-FIXATION-CSS" "between-FIXATION-CSR"
        "between-CS--CSS" "between-CS--CSR" "between-CSS-CSR"
    )
    
    for valid_type in "${valid_types[@]}"; do
        if [ "$map_type" = "$valid_type" ]; then
            return 0  # Valid
        fi
    done
    return 1  # Invalid
}

# Function to validate task
validate_task() {
    local task=$1
    if [ "$task" = "phase2" ] || [ "$task" = "phase3" ]; then
        return 0  # Valid
    fi
    return 1  # Invalid
}

# Function to validate method
validate_method() {
    local method=$1
    if [ "$method" = "flameo" ] || [ "$method" = "randomise" ]; then
        return 0  # Valid
    fi
    return 1  # Invalid
}

# Function to launch scripts from directory
launch_scripts_from_dir() {
    local dir_path=$1
    local method_name=$2
    local scripts_submitted=0
    local scripts_found=0
    
    if [ ! -d "$dir_path" ]; then
        echo "  Directory not found: $dir_path"
        return 0
    fi
    
    # Find all .sh files in the directory
    for script in "$dir_path"/*.sh; do
        if [ -f "$script" ]; then
            scripts_found=$((scripts_found + 1))
            script_name=$(basename "$script")
            
            # Apply filters if specified
            local should_submit=true
            
            if [ -n "$FILTER_METHOD" ] && [[ ! "$script_name" =~ $FILTER_METHOD ]]; then
                should_submit=false
            fi
            
            if [ -n "$FILTER_MAP_TYPE" ] && [[ ! "$script_name" =~ $FILTER_MAP_TYPE ]]; then
                should_submit=false
            fi
            
            if [ -n "$FILTER_TASK" ] && [[ ! "$script_name" =~ $FILTER_TASK ]]; then
                should_submit=false
            fi
            
            if [ "$should_submit" = true ]; then
                if [ "$DRY_RUN" = true ]; then
                    echo "    [DRY RUN] Would submit: $script_name"
                    scripts_submitted=$((scripts_submitted + 1))
                else
                    # Check job limit if specified
                    if [ -n "$MAX_JOBS" ]; then
                        while ! check_job_limit "$MAX_JOBS"; do
                            if [ "$VERBOSE" = true ]; then
                                echo "      Waiting for job limit (current: $(squeue -u $USER --format="%i" --noheader | wc -l), limit: $MAX_JOBS)"
                            fi
                            sleep 2
                        done
                    fi
                    
                    echo "    Submitting: $script_name"
                    if [ "$VERBOSE" = true ]; then
                        sbatch "$script"
                    else
                        sbatch "$script" > /dev/null 2>&1
                    fi
                    
                    if [ $? -eq 0 ]; then
                        scripts_submitted=$((scripts_submitted + 1))
                        if [ "$VERBOSE" = true ]; then
                            echo "      ✓ Successfully submitted"
                        fi
                        
                        # Add delay between submissions if specified
                        if [ -n "$JOB_DELAY" ] && [ "$JOB_DELAY" -gt 0 ]; then
                            if [ "$VERBOSE" = true ]; then
                                echo "      Waiting $JOB_DELAY seconds before next submission..."
                            fi
                            sleep "$JOB_DELAY"
                        fi
                    else
                        echo "      ✗ Warning: Failed to submit $script_name"
                    fi
                fi
            fi
        fi
    done
    
    echo "    Summary: $scripts_submitted/$scripts_found scripts submitted"
    return $scripts_submitted
}

# Parse command line arguments
DRY_RUN=false
VERBOSE=false
FILTER_METHOD=""
FILTER_MAP_TYPE=""
FILTER_TASK=""
MAX_JOBS=""
JOB_DELAY=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --help|-h)
            show_usage
            exit 0
            ;;
        --method)
            if validate_method "$2"; then
                FILTER_METHOD="$2"
                shift 2
            else
                echo "Error: Invalid method '$2'. Valid methods are: flameo, randomise"
                exit 1
            fi
            ;;
        --map-type)
            if validate_map_type "$2"; then
                FILTER_MAP_TYPE="$2"
                shift 2
            else
                echo "Error: Invalid map type '$2'. Use --help to see valid map types."
                exit 1
            fi
            ;;
        --task)
            if validate_task "$2"; then
                FILTER_TASK="$2"
                shift 2
            else
                echo "Error: Invalid task '$2'. Valid tasks are: phase2, phase3"
                exit 1
            fi
            ;;
        --dry-run|-n)
            DRY_RUN=true
            shift
            ;;
        --verbose|-v)
            VERBOSE=true
            shift
            ;;
        --max-jobs)
            if [[ "$2" =~ ^[0-9]+$ ]] && [ "$2" -gt 0 ]; then
                MAX_JOBS="$2"
                shift 2
            else
                echo "Error: --max-jobs must be a positive integer"
                exit 1
            fi
            ;;
        --job-delay)
            if [[ "$2" =~ ^[0-9]+$ ]] && [ "$2" -ge 0 ]; then
                JOB_DELAY="$2"
                shift 2
            else
                echo "Error: --job-delay must be a non-negative integer"
                exit 1
            fi
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

echo "======================================================================"
echo "Group-Level LSS Searchlight Analysis Job Launcher - Step 4 of LSS Pipeline"
echo "======================================================================"
echo "Scripts directory: $SCRIPTS_BASE_DIR"

if [ "$DRY_RUN" = true ]; then
    echo "DRY RUN MODE - No jobs will be submitted"
fi

if [ "$VERBOSE" = true ]; then
    echo "VERBOSE MODE - Detailed output enabled"
fi

if [ -n "$MAX_JOBS" ]; then
    echo "MAX JOBS: $MAX_JOBS (will wait if limit reached)"
fi

if [ -n "$JOB_DELAY" ] && [ "$JOB_DELAY" -gt 0 ]; then
    echo "JOB DELAY: $JOB_DELAY seconds between submissions"
fi

if [ -n "$FILTER_METHOD" ]; then
    echo "METHOD FILTER: $FILTER_METHOD"
fi

if [ -n "$FILTER_MAP_TYPE" ]; then
    echo "MAP TYPE FILTER: $FILTER_MAP_TYPE"
fi

if [ -n "$FILTER_TASK" ]; then
    echo "TASK FILTER: $FILTER_TASK"
fi

echo ""

# Check if scripts directory exists
if [ ! -d "$SCRIPTS_BASE_DIR" ]; then
    echo "Error: Scripts directory does not exist: $SCRIPTS_BASE_DIR"
    echo "Please run create_group_LSS_searchlight.py first to generate the scripts."
    exit 1
fi

# Submit all scripts in all method directories
total_scripts_submitted=0
methods_processed=0

# Determine which methods to process
if [ -n "$FILTER_METHOD" ]; then
    methods_to_process=("$FILTER_METHOD")
else
    methods_to_process=("flameo" "randomise")
fi

for method in "${methods_to_process[@]}"; do
    method_dir="$SCRIPTS_BASE_DIR/$method"
    
    if [ -d "$method_dir" ]; then
        echo "Processing method: $method"
        echo "  Directory: $method_dir"
        
        # Launch scripts from this method directory
        scripts_submitted=$(launch_scripts_from_dir "$method_dir" "$method")
        total_scripts_submitted=$((total_scripts_submitted + scripts_submitted))
        methods_processed=$((methods_processed + 1))
        
        echo ""
    else
        echo "Method directory not found: $method_dir"
        echo "  This might indicate that scripts haven't been generated yet for method: $method"
        echo ""
    fi
done

# Final summary
echo "======================================================================"
echo "LAUNCH SUMMARY"
echo "======================================================================"

if [ "$DRY_RUN" = true ]; then
    echo "DRY RUN: Would have submitted $total_scripts_submitted scripts"
    echo "DRY RUN: Would have processed $methods_processed methods"
    echo ""
    echo "To actually submit the jobs, run without --dry-run"
else
    echo "Total scripts submitted: $total_scripts_submitted"
    echo "Methods processed: $methods_processed"
    echo ""
    echo "Use 'squeue -u $USER' to monitor job status"
    echo "Use 'scancel <job_id>' to cancel specific jobs"
fi

echo ""
echo "LSS Analysis Pipeline Status:"
echo "  Step 1: First-level LSS analysis (individual trials)"
echo "    - Scripts: create_1st_LSS_singleTrialEstimate.py"
echo "    - Launcher: launch_1st_LSS_1st_singleTrialEstimate.sh"
echo ""
echo "  Step 2: Trial merging (4D image creation)"
echo "    - Scripts: create_1st_LSS_2nd_cateAlltrials.py"
echo "    - Launcher: launch_1st_LSS_2nd_cateAlltrials.sh"
echo ""
echo "  Step 3: Similarity analysis"
echo "    - Scripts: create_1st_LSS_3rd_similarity.py"
echo "    - Launcher: launch_1st_LSS_3rd_similarity.sh"
echo ""
echo "  Step 4: Group-level analysis [COMPLETED]"
echo "    - Scripts: create_group_LSS_searchlight.py"
echo "    - Launcher: launch_group_LSS.sh [THIS SCRIPT]"
echo ""
echo "  Step 5: Results analysis and visualization"
echo "    - Ready for statistical results interpretation"
echo ""

if [ "$DRY_RUN" = true ]; then
    echo "Ready to submit jobs (run without --dry-run)"
else
    echo "The group-level LSS searchlight analysis jobs are now running!"
fi

echo "======================================================================"
