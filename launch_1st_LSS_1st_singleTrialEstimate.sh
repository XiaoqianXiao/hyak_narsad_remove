#!/bin/bash

# =============================================================================
# First-Level LSS SLURM Job Launcher
# =============================================================================
#
# This script launches SLURM jobs for first-level LSS analysis.
# It automatically detects and launches scripts generated by create_1st_LSS.py
#
# Usage:
#   ./launch_1st_LSS_1st_singleTrialEstimate.sh                    # Launch all available scripts
#   ./launch_1st_LSS_1st_singleTrialEstimate.sh --phase phase2     # Launch only phase2 scripts
#   ./launch_1st_LSS_1st_singleTrialEstimate.sh --subjects N101 N102 # Launch only specific subjects
#   ./launch_1st_LSS_1st_singleTrialEstimate.sh --dry-run          # Show what would be launched
#   ./launch_1st_LSS_1st_singleTrialEstimate.sh --help             # Show this help message
#
# Author: Xiaoqian Xiao (xiao.xiaoqian.320@gmail.com)
#
# =============================================================================

# =============================================================================
# CONFIGURATION
# =============================================================================

# Base directory for LSS scripts
SCRIPTS_BASE_DIR="/gscratch/scrubbed/fanglab/xiaoqian/NARSAD/work_flows/LSS"

# Default settings
PHASE=""
SUBJECTS=()
DRY_RUN=false
VERBOSE=false

# =============================================================================
# HELPER FUNCTIONS
# =============================================================================

show_usage() {
    cat << EOF
Usage: $0 [OPTIONS]

Launch SLURM jobs for first-level LSS analysis.

OPTIONS:
    --phase PHASE           Specific phase to process (phase2, phase3)
    --subjects SUB1 SUB2    Specific subjects to process
    --dry-run               Show what would be launched without submitting
    --verbose               Verbose output
    --help                  Show this help message

EXAMPLES:
    # Launch all available scripts
    $0
    
    # Launch only phase2 scripts
    $0 --phase phase2
    
    # Launch only specific subjects
    $0 --subjects N101 N102 N103
    
    # Launch phase2 scripts for specific subjects
    $0 --phase phase2 --subjects N101 N102
    
    # Show what would be launched without submitting
    $0 --dry-run
    
    # Verbose output
    $0 --verbose

EOF
}

# =============================================================================
# ARGUMENT PARSING
# =============================================================================

while [[ $# -gt 0 ]]; do
    case $1 in
        --phase)
            PHASE="$2"
            shift 2
            ;;
        --subjects)
            shift
            while [[ $# -gt 0 && ! "$1" =~ ^-- ]]; do
                SUBJECTS+=("$1")
                shift
            done
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --help)
            show_usage
            exit 0
            ;;
        *)
            echo "Error: Unknown option: $1" >&2
            show_usage
            exit 1
            ;;
    esac
done

# =============================================================================
# SCRIPT DISCOVERY AND LAUNCHING
# =============================================================================

echo "=========================================="
echo "First-Level LSS SLURM Job Launcher"
echo "=========================================="

if [[ -n "$PHASE" ]]; then
    echo "Phase filter: $PHASE"
fi

if [[ ${#SUBJECTS[@]} -gt 0 ]]; then
    echo "Subject filter: ${SUBJECTS[*]}"
fi

if [[ "$DRY_RUN" == true ]]; then
    echo "DRY RUN MODE - No jobs will be submitted"
fi

if [[ "$VERBOSE" == true ]]; then
    echo "Verbose mode enabled"
fi

echo "=========================================="

# Function to launch scripts from a specific phase directory
launch_phase_scripts() {
    local phase_dir="$1"
    local phase_name="$2"
    
    if [[ ! -d "$phase_dir" ]]; then
        echo "Phase directory not found: $phase_dir"
        return
    fi
    
    echo "Processing phase: $phase_name"
    echo "Scanning directory: $phase_dir"
    
    # Find all SLURM scripts in the phase directory
    local scripts_found=0
    local scripts_launched=0
    
    # Get all SLURM scripts
    local all_scripts=()
    while IFS= read -r -d '' script; do
        all_scripts+=("$script")
    done < <(find "$phase_dir" -name "*.sh" -type f -print0)
    
    if [[ ${#all_scripts[@]} -eq 0 ]]; then
        echo "  No SLURM scripts found in: $phase_dir"
        return
    fi
    
    echo "  Found ${#all_scripts[@]} SLURM scripts"
    
    # Process each script
    for script in "${all_scripts[@]}"; do
        local script_name=$(basename "$script")
        
        # Apply subject filter if specified
        local should_launch=true
        
        if [[ ${#SUBJECTS[@]} -gt 0 ]]; then
            should_launch=false
            for subject in "${SUBJECTS[@]}"; do
                if [[ "$script_name" =~ $subject ]]; then
                    should_launch=true
                    break
                fi
            done
        fi
        
        if [[ "$should_launch" == true ]]; then
            scripts_found=$((scripts_found + 1))
            
            if [[ "$DRY_RUN" == true ]]; then
                echo "    [DRY RUN] Would submit: $script_name"
            else
                if [[ "$VERBOSE" == true ]]; then
                    echo "    Submitting: $script_name"
                fi
                
                # Submit the job
                local job_id=$(sbatch "$script" 2>&1)
                
                if [[ $? -eq 0 ]]; then
                    # Extract job ID from sbatch output
                    local job_number=$(echo "$job_id" | grep -o '[0-9]\+' | head -1)
                    if [[ -n "$job_number" ]]; then
                        echo "    Submitted: $script_name (Job ID: $job_number)"
                    else
                        echo "    Submitted: $script_name"
                    fi
                    scripts_launched=$((scripts_launched + 1))
                else
                    echo "    Error submitting: $script_name - $job_id"
                fi
            fi
        fi
    done
    
    if [[ "$DRY_RUN" == true ]]; then
        echo "  [DRY RUN] Found $scripts_found scripts (would launch $scripts_found)"
    else
        echo "  Found $scripts_found scripts, launched $scripts_launched"
    fi
    
    echo ""
}

# =============================================================================
# MAIN EXECUTION
# =============================================================================

# Determine which phases to process
if [[ -n "$PHASE" ]]; then
    # Process only specified phase
    if [[ "$PHASE" == "phase2" || "$PHASE" == "phase3" ]]; then
        phase_dir="$SCRIPTS_BASE_DIR/$PHASE"
        launch_phase_scripts "$phase_dir" "$PHASE"
    else
        echo "Error: Invalid phase '$PHASE'. Valid phases are: phase2, phase3"
        exit 1
    fi
else
    # Process all available phases
    for phase in "phase2" "phase3"; do
        phase_dir="$SCRIPTS_BASE_DIR/$phase"
        if [[ -d "$phase_dir" ]]; then
            launch_phase_scripts "$phase_dir" "$phase"
        else
            echo "Phase directory not found: $phase_dir"
        fi
    done
fi

# =============================================================================
# SUMMARY
# =============================================================================

echo "=========================================="
echo "Job launching completed!"
echo "=========================================="

if [[ "$DRY_RUN" == true ]]; then
    echo ""
    echo "To actually launch the jobs, run without --dry-run:"
    cmd="$0"
    [[ -n "$PHASE" ]] && cmd="$cmd --phase $PHASE"
    [[ ${#SUBJECTS[@]} -gt 0 ]] && cmd="$cmd --subjects ${SUBJECTS[*]}"
    echo "  $cmd"
fi

echo ""
echo "To check job status, use:"
echo "  squeue -u \$USER"
echo ""
echo "To check specific job output:"
echo "  tail -f /path/to/script_%j.out"
echo "=========================================="

