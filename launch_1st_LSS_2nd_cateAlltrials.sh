#!/bin/bash

# =============================================================================
# Second-Level LSS SLURM Job Launcher (Trial Merging)
# =============================================================================
#
# This script launches SLURM jobs for the second step of LSS analysis:
# merging individual LSS trial outputs into 4D NIfTI images.
# It automatically detects and launches scripts generated by create_1st_LSS_2_cateAlltrials.py
#
# Usage:
#   ./launch_1st_LSS_2nd_cateAlltrials.sh                    # Launch all available scripts
#   ./launch_1st_LSS_2nd_cateAlltrials.sh --task phase2     # Launch only phase2 scripts
#   ./launch_1st_LSS_2nd_cateAlltrials.sh --subjects N101 N102 # Launch only specific subjects
#   ./launch_1st_LSS_2nd_cateAlltrials.sh --dry-run          # Show what would be launched
#   ./launch_1st_LSS_2nd_cateAlltrials.sh --help             # Show this help message
#
# Author: Xiaoqian Xiao (xiao.xiaoqian.320@gmail.com)
#
# =============================================================================

# =============================================================================
# CONFIGURATION
# =============================================================================

# Base directory for LSS step 2 scripts
SCRIPTS_BASE_DIR="/gscratch/scrubbed/fanglab/xiaoqian/NARSAD/work_flows/LSS_step2"

# Default settings
TASK=""
SUBJECTS=()
DRY_RUN=false
VERBOSE=false
MAX_JOBS=50  # Maximum concurrent jobs to submit
JOB_DELAY=1  # Delay between job submissions (seconds)

# =============================================================================
# HELPER FUNCTIONS
# =============================================================================

show_usage() {
    cat << EOF
Usage: $0 [OPTIONS]

Launch SLURM jobs for LSS trial merging (Step 2 of LSS analysis).

This step merges individual LSS trial outputs (cope1 files) into 4D NIfTI images
for each subject-task-contrast combination.

OPTIONS:
    --task TASK             Specific task to process (phase2, phase3)
    --subjects SUB1 SUB2    Specific subjects to process
    --dry-run               Show what would be launched without submitting
    --verbose               Verbose output
    --max-jobs N            Maximum concurrent jobs to submit (default: $MAX_JOBS)
    --job-delay N           Delay between job submissions in seconds (default: $JOB_DELAY)
    --help                  Show this help message

EXAMPLES:
    # Launch all available scripts
    $0
    
    # Launch only phase2 scripts
    $0 --task phase2
    
    # Launch only specific subjects
    $0 --subjects N101 N102 N103
    
    # Launch phase2 scripts for specific subjects
    $0 --task phase2 --subjects N101 N102
    
    # Show what would be launched without submitting
    $0 --dry-run
    
    # Verbose output with custom job limits
    $0 --verbose --max-jobs 30 --job-delay 2
    
    # Launch with conservative job submission
    $0 --max-jobs 20 --job-delay 3

WORKFLOW CONTEXT:
    This script is Step 2 of the LSS analysis pipeline:
    
    Step 1: create_1st_LSS.py -> run_1st_LSS.py (individual trial GLM)
    Step 2: create_1st_LSS_2_cateAlltrials.py -> first_LSS_2_cateAlltrials.py (merge trials)
    Step 3: Similarity analysis and group-level processing
    
    The scripts generated by create_1st_LSS_2_cateAlltrials.py are located in:
    $SCRIPTS_BASE_DIR/{task}/sub_{subject}_slurm.sh

EOF
}

# Function to check if we can submit more jobs
check_job_limit() {
    local current_jobs=$(squeue -u "$USER" --format="%i" --noheader 2>/dev/null | wc -l)
    if [[ $current_jobs -ge $MAX_JOBS ]]; then
        echo "    [INFO] Job limit reached ($current_jobs/$MAX_JOBS). Waiting for jobs to complete..."
        while [[ $(squeue -u "$USER" --format="%i" --noheader 2>/dev/null | wc -l) -ge $MAX_JOBS ]]; do
            sleep 10
        done
        echo "    [INFO] Resuming job submission..."
    fi
}

# Function to validate subject format
validate_subject() {
    local subject="$1"
    if [[ ! "$subject" =~ ^N[0-9]+$ ]]; then
        echo "Warning: Subject '$subject' doesn't match expected format (N###). Skipping..."
        return 1
    fi
    return 0
}

# =============================================================================
# ARGUMENT PARSING
# =============================================================================

while [[ $# -gt 0 ]]; do
    case $1 in
        --task)
            TASK="$2"
            shift 2
            ;;
        --subjects)
            shift
            while [[ $# -gt 0 && ! "$1" =~ ^-- ]]; do
                if validate_subject "$1"; then
                    SUBJECTS+=("$1")
                fi
                shift
            done
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --max-jobs)
            MAX_JOBS="$2"
            if [[ ! "$MAX_JOBS" =~ ^[0-9]+$ ]] || [[ $MAX_JOBS -lt 1 ]]; then
                echo "Error: --max-jobs must be a positive integer" >&2
                exit 1
            fi
            shift 2
            ;;
        --job-delay)
            JOB_DELAY="$2"
            if [[ ! "$JOB_DELAY" =~ ^[0-9]+$ ]] || [[ $JOB_DELAY -lt 0 ]]; then
                echo "Error: --job-delay must be a non-negative integer" >&2
                exit 1
            fi
            shift 2
            ;;
        --help)
            show_usage
            exit 0
            ;;
        *)
            echo "Error: Unknown option: $1" >&2
            show_usage
            exit 1
            ;;
    esac
done

# =============================================================================
# SCRIPT DISCOVERY AND LAUNCHING
# =============================================================================

echo "=========================================="
echo "Second-Level LSS SLURM Job Launcher"
echo "LSS Trial Merging (Step 2)"
echo "=========================================="

if [[ -n "$TASK" ]]; then
    echo "Task filter: $TASK"
fi

if [[ ${#SUBJECTS[@]} -gt 0 ]]; then
    echo "Subject filter: ${SUBJECTS[*]}"
fi

if [[ "$DRY_RUN" == true ]]; then
    echo "DRY RUN MODE - No jobs will be submitted"
fi

if [[ "$VERBOSE" == true ]]; then
    echo "Verbose mode enabled"
fi

echo "Job submission settings:"
echo "  Max concurrent jobs: $MAX_JOBS"
echo "  Job submission delay: ${JOB_DELAY}s"
echo "=========================================="

# Function to launch scripts from a specific task directory
launch_task_scripts() {
    local task_dir="$1"
    local task_name="$2"
    
    if [[ ! -d "$task_dir" ]]; then
        echo "Task directory not found: $task_dir"
        return
    fi
    
    echo "Processing task: $task_name"
    echo "Scanning directory: $task_dir"
    
    # Find all SLURM scripts in the task directory
    local scripts_found=0
    local scripts_launched=0
    local scripts_skipped=0
    
    # Get all SLURM scripts
    local all_scripts=()
    while IFS= read -r -d '' script; do
        all_scripts+=("$script")
    done < <(find "$task_dir" -name "*.sh" -type f -print0)
    
    if [[ ${#all_scripts[@]} -eq 0 ]]; then
        echo "  No SLURM scripts found in: $task_dir"
        return
    fi
    
    echo "  Found ${#all_scripts[@]} SLURM scripts"
    
    # Process each script
    for script in "${all_scripts[@]}"; do
        local script_name=$(basename "$script")
        
        # Apply subject filter if specified
        local should_launch=true
        
        if [[ ${#SUBJECTS[@]} -gt 0 ]]; then
            should_launch=false
            for subject in "${SUBJECTS[@]}"; do
                if [[ "$script_name" =~ $subject ]]; then
                    should_launch=true
                    break
                fi
            done
        fi
        
        if [[ "$should_launch" == true ]]; then
            scripts_found=$((scripts_found + 1))
            
            if [[ "$DRY_RUN" == true ]]; then
                echo "    [DRY RUN] Would submit: $script_name"
            else
                # Check job limit before submitting
                check_job_limit
                
                if [[ "$VERBOSE" == true ]]; then
                    echo "    Submitting: $script_name"
                fi
                
                # Submit the job
                local job_id=$(sbatch "$script" 2>&1)
                
                if [[ $? -eq 0 ]]; then
                    # Extract job ID from sbatch output
                    local job_number=$(echo "$job_id" | grep -o '[0-9]\+' | head -1)
                    if [[ -n "$job_number" ]]; then
                        echo "    Submitted: $script_name (Job ID: $job_number)"
                    else
                        echo "    Submitted: $script_name"
                    fi
                    scripts_launched=$((scripts_launched + 1))
                    
                    # Add delay between submissions if specified
                    if [[ $JOB_DELAY -gt 0 ]]; then
                        sleep $JOB_DELAY
                    fi
                else
                    echo "    Error submitting: $script_name - $job_id"
                    scripts_skipped=$((scripts_skipped + 1))
                fi
            fi
        else
            if [[ "$VERBOSE" == true ]]; then
                echo "    Skipping (subject filter): $script_name"
            fi
        fi
    done
    
    if [[ "$DRY_RUN" == true ]]; then
        echo "  [DRY RUN] Found $scripts_found scripts (would launch $scripts_found)"
    else
        echo "  Found $scripts_found scripts, launched $scripts_launched, skipped $scripts_skipped"
    fi
    
    echo ""
}

# =============================================================================
# MAIN EXECUTION
# =============================================================================

# Check if SCRIPTS_BASE_DIR exists
if [[ ! -d "$SCRIPTS_BASE_DIR" ]]; then
    echo "Error: Base directory not found: $SCRIPTS_BASE_DIR"
    echo ""
    echo "This directory should contain the LSS step 2 scripts generated by:"
    echo "  python create_1st_LSS_2_cateAlltrials.py"
    echo ""
    echo "Please run the script generator first, or check the path configuration."
    exit 1
fi

# Determine which tasks to process
if [[ -n "$TASK" ]]; then
    # Process only specified task
    if [[ "$TASK" == "phase2" || "$TASK" == "phase3" ]]; then
        task_dir="$SCRIPTS_BASE_DIR/$TASK"
        launch_task_scripts "$task_dir" "$TASK"
    else
        echo "Error: Invalid task '$TASK'. Valid tasks are: phase2, phase3"
        exit 1
    fi
else
    # Process all available tasks
    local tasks_processed=0
    for task in "phase2" "phase3"; do
        task_dir="$SCRIPTS_BASE_DIR/$task"
        if [[ -d "$task_dir" ]]; then
            launch_task_scripts "$task_dir" "$task"
            tasks_processed=$((tasks_processed + 1))
        else
            echo "Task directory not found: $task_dir"
        fi
    done
    
    if [[ $tasks_processed -eq 0 ]]; then
        echo "Warning: No task directories found. This might indicate:"
        echo "  1. Scripts haven't been generated yet"
        echo "  2. Different directory structure than expected"
        echo "  3. Path configuration issue"
        echo ""
        echo "Expected structure:"
        echo "  $SCRIPTS_BASE_DIR/"
        echo "  ├── phase2/"
        echo "  │   ├── sub_N101_slurm.sh"
        echo "  │   └── ..."
        echo "  └── phase3/"
        echo "      ├── sub_N101_slurm.sh"
        echo "      └── ..."
    fi
fi

# =============================================================================
# SUMMARY
# =============================================================================

echo "=========================================="
echo "Job launching completed!"
echo "=========================================="

if [[ "$DRY_RUN" == true ]]; then
    echo ""
    echo "To actually launch the jobs, run without --dry-run:"
    cmd="$0"
    [[ -n "$TASK" ]] && cmd="$cmd --task $TASK"
    [[ ${#SUBJECTS[@]} -gt 0 ]] && cmd="$cmd --subjects ${SUBJECTS[*]}"
    echo "  $cmd"
fi

echo ""
echo "LSS Analysis Pipeline Status:"
echo "  Step 1: First-level LSS analysis (individual trials)"
echo "    - Scripts: create_1st_LSS.py"
echo "    - Launcher: launch_1st_LSS_1st_singleTrialEstimate.sh"
echo ""
echo "  Step 2: Trial merging (4D image creation) [CURRENT STEP]"
echo "    - Scripts: create_1st_LSS_2_cateAlltrials.py"
echo "    - Launcher: launch_1st_LSS_2nd_cateAlltrials.sh [THIS SCRIPT]"
echo ""
echo "  Step 3: Similarity analysis and group processing"
echo "    - Scripts: Various similarity analysis scripts"
echo "    - Launcher: launch_group_LSS.sh"
echo ""
echo "To check job status, use:"
echo "  squeue -u \$USER"
echo ""
echo "To check specific job output:"
echo "  tail -f /path/to/sub_{subject}_%j.out"
echo ""
echo "Next steps after trial merging:"
echo "  1. Wait for all jobs to complete"
echo "  2. Verify 4D images were created successfully"
echo "  3. Proceed to Step 3 (similarity analysis)"
echo ""
echo "For monitoring and troubleshooting:"
echo "  # Check current job status"
echo "  squeue -u \$USER"
echo ""
echo "  # Check job history"
echo "  sacct -u \$USER --starttime=2024-01-01"
echo ""
echo "  # Check specific job output"
echo "  tail -f /gscratch/scrubbed/fanglab/xiaoqian/NARSAD/work_flows/LSS_step2/*/sub_*_*.out"
echo "=========================================="
